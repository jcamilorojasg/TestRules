name: Restrict Merge

on:
  pull_request:
    types:
      - synchronize
      - opened

jobs:
  check-prs:
    runs-on: self-hosted

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: List Open PRs
        id: list-prs
        run: |
          $prs = Invoke-RestMethod -Method Get -Uri "https://api.github.com/repos/${{ github.repository }}/pulls?state=open&base=${{ github.event.pull_request.base.ref }}"
          $prs | ConvertTo-Json | Out-File prs.json
           foreach ($pr in $prs) {
            echo "PR Number: $($pr.number)"
          }
          echo "PR_LIST = ${{ env.PR_LIST }}"
      - name: Check PRs
        run: |
          $prs = Get-Content prs.json | ConvertFrom-Json
          if ($prs -ne $null) {
            $oldestPR = $prs | Sort-Object -Property created_at | Select-Object -First 1
            echo $oldestPR
            if ($oldestPR.number -ne $env:GITHUB_PR_NUMBER) {
              echo "check_status=failure" >> $GITHUB_ENV
              echo "There are other open pull requests for this branch:"
            }
            else {
              echo "check_status=success" >> $GITHUB_ENV
              echo "No other open pull requests for this branch."
            }
          }
          else {
            echo "check_status=success" >> $GITHUB_ENV
            echo "No other open pull requests for this branch."
          }

      - name: Set Status Check
        run: |
          echo "check_status = $env:check_status"
          $status = @{
            owner = $env:GITHUB_REPOSITORY.Split("/")[0]
            repo = $env:GITHUB_REPOSITORY.Split("/")[1]
            sha = $env:GITHUB_SHA
            state = $env:check_status
            context = "Check PRs"
            description = "Check if there are other open pull requests for this branch"
          }
          $token = '${{ secrets.TOKEN_SECRET }}'
          $header = @{
            Authorization = "Bearer ${{ secrets.TOKEN_SECRET }}"
            "Content-Type" = "application/json"
          }
          $apiUrl = "https://api.github.com/repos/$($status.owner)/$($status.repo)/statuses/$($status.sha)"
          echo $apiUrl
          Invoke-RestMethod -Method Post -Uri $apiUrl -Headers $header -ContentType "application/json" -Body ($status | ConvertTo-Json)
